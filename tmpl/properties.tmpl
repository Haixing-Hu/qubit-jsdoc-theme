<?js
    var data = obj;
    var self = this;

    // Handle both old format (single properties array) and new format (static/instance separation)
    var staticProps = data.staticProperties || [];
    var instanceProps = data.instanceProperties || data.properties || [];

    // Function to render a properties table
    function renderPropertiesTable(props, title) {
        if (!props || props.length === 0) return '';

        /* sort subprops under their parent props (like opts.classname) */
        var parentProp = null;
        props.forEach(function(prop, i) {
            if (!prop) { return; }
            if ( parentProp && prop.name && prop.name.indexOf(parentProp.name + '.') === 0 ) {
                prop.name = prop.name.substr(parentProp.name.length+1);
                parentProp.subprops = parentProp.subprops || [];
                parentProp.subprops.push(prop);
                props[i] = null;
            }
            else {
                parentProp = prop;
            }
        });

        /* determine if we need extra columns, "attributes" and "default" */
        props.hasAttributes = false;
        props.hasDefault = false;
        props.hasName = false;

        props.forEach(function(prop) {
            if (!prop) { return; }

            if (prop.optional || prop.nullable) {
                props.hasAttributes = true;
            }

            if (prop.name) {
                props.hasName = true;
            }

            if (typeof prop.defaultvalue !== 'undefined' && !data.isEnum) {
                props.hasDefault = true;
            }
        });

        var html = '';
        if (title) {
            html += '<h3 class="subsection-title">' + title + '</h3>';
        }

        html += '<div class="allow-overflow">';
        html += '<table class="props">';
        html += '<thead><tr>';

        if (props.hasName) {
            html += '<th>' + t('name') + '</th>';
        }
        html += '<th>' + t('type') + '</th>';

        if (props.hasAttributes) {
            html += '<th>' + t('attributes') + '</th>';
        }

        if (props.hasDefault) {
            html += '<th>' + t('default') + '</th>';
        }

        html += '<th class="last">' + t('description') + '</th>';
        html += '</tr></thead><tbody>';

        props.forEach(function(prop) {
            if (!prop) { return; }

            html += '<tr>';

            if (props.hasName) {
                var nameDisplay = prop.name;
                if (prop.accessType && prop.accessType !== 'property') {
                    nameDisplay += ' <em>(' + prop.accessType + ')</em>';
                }
                html += '<td class="name"><code>' + nameDisplay + '</code></td>';
            }

            html += '<td class="type">';
            if (prop.type && prop.type.names) {
                html += self.partial('type.tmpl', prop.type.names);
            }
            html += '</td>';

            if (props.hasAttributes) {
                html += '<td class="attributes">';
                if (prop.optional) {
                    html += '&lt;optional><br>';
                }
                if (prop.nullable) {
                    html += '&lt;nullable><br>';
                }
                html += '</td>';
            }

            if (props.hasDefault) {
                html += '<td class="default">';
                if (typeof prop.defaultvalue !== 'undefined') {
                    html += self.htmlsafe(prop.defaultvalue);
                }
                html += '</td>';
            }

            html += '<td class="description last">' + (prop.description || '');
            if (prop.subprops) {
                html += '<h6>Properties</h6>' + self.partial('properties.tmpl', prop);
            }
            html += '</td>';

            html += '</tr>';
        });

        html += '</tbody></table></div>';
        return html;
    }
?>

<?js if (staticProps.length > 0) { ?>
    <?js= renderPropertiesTable(staticProps, '静态属性') ?>
<?js } ?>

<?js if (instanceProps.length > 0) { ?>
    <?js= renderPropertiesTable(instanceProps, staticProps.length > 0 ? '实例属性' : null) ?>
<?js } ?>
